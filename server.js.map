{"version":3,"sources":["../src/server.js"],"names":["MySQLStore","require","session","expireTime","then","sessionStore","clearExpired","createDatabaseTable","checkExpirationInterval","expiration","CreateConnection","app","PORT","process","env","use","key","secret","store","resave","cookie","maxAge","saveUninitialized","bodyParser","json","express","urlencoded","extended","path","join","__dirname","get","req","res","sendFile","listen","console","log","error"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAKA;;;;AAFA,IAAMA,UAAU,GAAGC,OAAO,CAAC,uBAAD,CAAP,CAAiCC,0BAAjC,CAAnB;;AACA,IAAMC,UAAU,GAAG,SAAnB;AAGA,sCACGC,IADH,CACS,YAAM;AACf,MAAMC,YAAY,GAAG,IAAIL,UAAJ,CAAe;AAAE;AACpCM,IAAAA,YAAY,EAAE,IADoB;AACd;AACpBC,IAAAA,mBAAmB,EAAE,IAFa;AAEP;AAC3BC,IAAAA,uBAAuB,EAAEL,UAHS;AAGG;AACrCM,IAAAA,UAAU,EAAEN,UAJsB,CAIX;;AAJW,GAAf,EAKlBO,4BALkB,CAArB,CADe,CAQf;;AACA,MAAMC,GAAG,GAAG,0BAAZ;AACA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AAGAD,EAAAA,GAAG,CAACI,GAAJ,CAAQ,gCAAQ;AAAE;AAChBC,IAAAA,GAAG,EAAE,qBADS;AAEdC,IAAAA,MAAM,EAAE,uBAFM;AAGdC,IAAAA,KAAK,EAAEb,YAHO;AAIdc,IAAAA,MAAM,EAAE,KAJM;AAKdC,IAAAA,MAAM,EAAE;AAACC,MAAAA,MAAM,EAAElB;AAAT,KALM;AAKiB;AAC/BmB,IAAAA,iBAAiB,EAAE;AANL,GAAR,CAAR,EAbe,CAwBf;;AACAX,EAAAA,GAAG,CAACI,GAAJ,CAAQQ,uBAAWC,IAAX,EAAR;AACAb,EAAAA,GAAG,CAACI,GAAJ,CAAQU,oBAAQC,UAAR,CAAmB;AAACC,IAAAA,QAAQ,EAAE;AAAX,GAAnB,CAAR,EA1Be,CA0BgC;;AAG/C;;AACAhB,EAAAA,GAAG,CAACI,GAAJ,CAAQU,8BAAeG,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR,EA9Be,CA8B8C;;AAI7D;;AAKA;;AACAnB,EAAAA,GAAG,CAACI,GAAJ,CAAQd,OAAO,CAAC,mBAAD,CAAf;AACAU,EAAAA,GAAG,CAACI,GAAJ,CAAQd,OAAO,CAAC,sBAAD,CAAf;AACAU,EAAAA,GAAG,CAACI,GAAJ,CAAQd,OAAO,CAAC,kBAAD,CAAf;AACAU,EAAAA,GAAG,CAACI,GAAJ,CAAQd,OAAO,CAAC,2BAAD,CAAf;AACAU,EAAAA,GAAG,CAACI,GAAJ,CAAQd,OAAO,CAAC,sBAAD,CAAf;AAEAU,EAAAA,GAAG,CAACoB,GAAJ,CAAQ,GAAR,EAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxBA,IAAAA,GAAG,CAACC,QAAJ,CAAaN,iBAAKC,IAAL,CAAUC,SAAV,EAAoB,wBAApB,CAAb;AAED,GAHD;AAKA;;AACAnB,EAAAA,GAAG,CAACwB,MAAJ,CAAWvB,IAAX,EAAiB,YAAW;AACxBwB,IAAAA,OAAO,CAACC,GAAR,yCAA6CzB,IAA7C;AACD,GAFH;AAGC,CAxDD,WAyDQ,UAAA0B,KAAK,EAAI;AAACF,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AAAoB,QAAMA,KAAN;AAAa,CAzDnD","sourcesContent":["import '@babel/polyfill';\r\nimport express from 'express';\r\nimport path from 'path';\r\nimport session from 'express-session'\r\nimport fs from 'fs'\r\nimport bodyParser from 'body-parser'\r\nimport InitializeDatabase from './ServerComponents/InitializeDatabase/InitializeDatabase';\r\n\r\n\r\nconst MySQLStore = require('express-mysql-session')(session);\r\nconst expireTime = 100000000;\r\nimport CreateConnection from './ServerComponents/CreateConnection/CreateConnection';\r\n\r\nInitializeDatabase()\r\n  .then( () => {\r\nconst sessionStore = new MySQLStore({ // Esta configuracion es para la sesiones en el backend\r\n  clearExpired: true, // Limpiar los registros de las sesiones ya expiradas\r\n  createDatabaseTable: true, // Si no existe la tabla sessions en la base de datos, la crea\r\n  checkExpirationInterval: expireTime, // How frequently expired sessions will be cleared; milliseconds:\r\n  expiration: expireTime // The maximum age of a valid session; milliseconds. \r\n}, CreateConnection);\r\n\r\n//Configuraciones\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5050;\r\n\r\n\r\napp.use(session({ //Configuracion del express-sessions\r\n  key: 'session_cookie_name',\r\n  secret: 'session_cookie_secret',\r\n  store: sessionStore,\r\n  resave: false,\r\n  cookie: {maxAge: expireTime }, // Despues de este tiempo, el cookie va a vencer.\r\n  saveUninitialized: false \r\n}));\r\n\r\n\r\n\r\n//Middlewares\r\napp.use(bodyParser.json())\r\napp.use(express.urlencoded({extended: true})); // Permite utilizar el req.\r\n\r\n\r\n/* ----- Configuraciones ----- */\r\napp.use(express.static(path.join(__dirname, '../public')));  // Al parecer esto no funcionaba  xdd\r\n\r\n\r\n\r\n/* ----- Configurando handlebars ----- */\r\n\r\n\r\n\r\n\r\n/* ----- Rutas ----- */\r\napp.use(require('./Routes/index.js'));\r\napp.use(require('./Routes/clientes.js'));\r\napp.use(require('./Routes/auth.js'));\r\napp.use(require('./Routes/clasificacion.js'));\r\napp.use(require('./Routes/usuarios.js'));\r\n\r\napp.get('*',(req, res) => {\r\n  res.sendFile(path.join(__dirname,'./HtmlFiles/index.html'));\r\n\r\n})\r\n\r\n/* ----- Server Running ----- */\r\napp.listen(PORT, function() {\r\n    console.log(`Servidor montado en el puerto ${PORT}`);\r\n  });\r\n})\r\n.catch (error => {console.log(error); throw error;} );\r\n\r\n\r\n"],"file":"server.js"}