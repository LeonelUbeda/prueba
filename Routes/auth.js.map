{"version":3,"sources":["../../src/Routes/auth.js"],"names":["router","require","Router","get","req","res","session","user","send","permissions","JSON","stringify","status","end","next","destroy","post","body","pass","hash","crypto","SHA256","toString","console","log","then","response","parse","name","productos","clasificacion","lotes","administrador","rol","ID_rol","module","exports"],"mappings":";;AAAA;;AACA;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAnB,EAAf;;AAGAF,MAAM,CAACG,GAAP,CAAW,WAAX,EAAwB,UAACC,GAAD,EAAMC,GAAN,EAAa;AAEnC,MAAG,OAAOD,GAAG,CAACE,OAAJ,CAAYC,IAAnB,KAA4B,WAA/B,EAA2C;AACzCF,IAAAA,GAAG,CAACG,IAAJ,CAAS,IAAT;AACD,GAFD,MAEK;AACHH,IAAAA,GAAG,CAACG,IAAJ,CAAS,KAAT;AACD;AACF,CAPD;AASAR,MAAM,CAACG,GAAP,CAAW,WAAX,EAAwB,UAACC,GAAD,EAAMC,GAAN,EAAa;AACnC,MAAG,OAAOD,GAAG,CAACE,OAAX,KAAuB,WAA1B,EAAsC;AACpC,QAAMG,WAAW,GAAGL,GAAG,CAACE,OAAJ,CAAYG,WAAhC;AACA,QAAMF,IAAI,GAAGH,GAAG,CAACE,OAAJ,CAAYC,IAAzB;AAEAF,IAAAA,GAAG,CAACG,IAAJ,CAASE,IAAI,CAACC,SAAL,CAAe;AAACF,MAAAA,WAAW,EAAXA,WAAD;AAAcF,MAAAA,IAAI,EAAJA;AAAd,KAAf,CAAT;AACD,GALD,MAKK;AACHF,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACD;AACF,CATD;AAYAb,MAAM,CAACG,GAAP,CAAW,SAAX,EAAuB,UAACC,GAAD,EAAKC,GAAL,EAAUS,IAAV,EAAmB;AACtCV,EAAAA,GAAG,CAACE,OAAJ,CAAYS,OAAZ;AACAD,EAAAA,IAAI;AACP,CAHD;AAKAd,MAAM,CAACgB,IAAP,CAAY,QAAZ,EAAqB,UAAEZ,GAAF,EAAOC,GAAP,EAAgB;AAAA,kBAEbD,GAAG,CAACa,IAFS;AAAA,MAE3BV,IAF2B,aAE3BA,IAF2B;AAAA,MAErBW,IAFqB,aAErBA,IAFqB;;AAGnC,MAAIC,IAAI,GAAGC,qBAAOC,MAAP,CAAcH,IAAd,CAAX;;AACAC,EAAAA,IAAI,GAAGA,IAAI,CAACG,QAAL,EAAP;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,gCAAeZ,IAAf,EAAoBY,IAApB,EACGM,IADH,CACQ,UAACC,QAAD,EAAc;AAAE,WAAOhB,IAAI,CAACC,SAAL,CAAee,QAAQ,CAAC,CAAD,CAAvB,CAAP;AAAmC,GAD3D,EAEGD,IAFH,CAEQ,UAACC,QAAD,EAAc;AAAE,WAAOhB,IAAI,CAACiB,KAAL,CAAWD,QAAX,CAAP;AAA4B,GAFpD,EAGGD,IAHH,CAGS,UAACC,QAAD,EAAc;AACnBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AADmB,QAEZnB,IAFY,GAEoEmB,QAFpE,CAEZnB,IAFY;AAAA,QAENqB,IAFM,GAEoEF,QAFpE,CAENE,IAFM;AAAA,QAEDC,SAFC,GAEoEH,QAFpE,CAEDG,SAFC;AAAA,QAEUC,aAFV,GAEoEJ,QAFpE,CAEUI,aAFV;AAAA,QAEyBC,KAFzB,GAEoEL,QAFpE,CAEyBK,KAFzB;AAAA,QAEgCC,aAFhC,GAEoEN,QAFpE,CAEgCM,aAFhC;AAAA,QAE+CC,GAF/C,GAEoEP,QAFpE,CAE+CO,GAF/C;AAAA,QAEoDC,MAFpD,GAEoER,QAFpE,CAEoDQ,MAFpD;AAAA,QAE4DhB,IAF5D,GAEoEQ,QAFpE,CAE4DR,IAF5D;AAGnBd,IAAAA,GAAG,CAACE,OAAJ,CAAYG,WAAZ,GAA0B;AAAEoB,MAAAA,SAAS,EAATA,SAAF;AAAaC,MAAAA,aAAa,EAAbA,aAAb;AAA4BC,MAAAA,KAAK,EAALA,KAA5B;AAAoCC,MAAAA,aAAa,EAAbA;AAApC,KAA1B,CAHmB,CAG2D;;AAC9E5B,IAAAA,GAAG,CAACE,OAAJ,CAAY4B,MAAZ,GAAqBA,MAArB,CAJmB,CAIU;;AAC7B9B,IAAAA,GAAG,CAACE,OAAJ,CAAYC,IAAZ,GAAmB;AAACA,MAAAA,IAAI,EAAJA,IAAD;AAAOqB,MAAAA,IAAI,EAAJA,IAAP;AAAYV,MAAAA,IAAI,EAAJA;AAAZ,KAAnB,CALmB,CAKoB;AACvC;;AACAb,IAAAA,GAAG,CAACG,IAAJ,CAASE,IAAI,CAACC,SAAL,CAAe;AAAE;AACxBF,MAAAA,WAAW,EAAE;AAAE;AACboB,QAAAA,SAAS,EAATA,SADW;AAEXC,QAAAA,aAAa,EAAbA,aAFW;AAGXC,QAAAA,KAAK,EAALA,KAHW;AAIXC,QAAAA,aAAa,EAAbA,aAJW;AAKXC,QAAAA,GAAG,EAAHA;AALW,OADS;AAQtB1B,MAAAA,IAAI,EAAE;AAAE;AACNA,QAAAA,IAAI,EAAJA,IADI;AAEJqB,QAAAA,IAAI,EAAJA;AAFI;AARgB,KAAf,CAAT;AAcD,GAxBH,WAyBU;AAAA,WAAMvB,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAN;AAAA,GAzBV;AA2BD,CAjCD;AAoCAb,MAAM,CAACgB,IAAP,CAAY,gBAAZ,EAA8B,UAACZ,GAAD,EAAMC,GAAN,EAAc;AACxCkB,EAAAA,OAAO,CAACC,GAAR,CAAYpB,GAAG,CAACE,OAAJ,CAAYC,IAAZ,CAAiBW,IAA7B;AACH,CAFD;AAKAiB,MAAM,CAACC,OAAP,GAAiBpC,MAAjB","sourcesContent":["import VerificarLogin from '../AuthComponents/VerificarLogin/VericarLogin';\r\nimport crypto from 'crypto-js'\r\n\r\nconst router = require('express').Router();\r\n\r\n\r\nrouter.get('/islogged', (req, res) =>{\r\n \r\n  if(typeof req.session.user !== 'undefined'){\r\n    res.send(true)\r\n  }else{\r\n    res.send(false)\r\n  }\r\n})\r\n\r\nrouter.get('/userinfo', (req, res) =>{\r\n  if(typeof req.session !== 'undefined'){\r\n    const permissions = req.session.permissions;\r\n    const user = req.session.user;\r\n  \r\n    res.send(JSON.stringify({permissions, user}))\r\n  }else{\r\n    res.status(404).end()\r\n  }\r\n})\r\n\r\n\r\nrouter.get('/logout' , (req,res, next) => {\r\n    req.session.destroy()\r\n    next()\r\n})\r\n\r\nrouter.post('/login',( req, res ) => {\r\n\r\n  const { user, pass} = req.body;\r\n  let hash = crypto.SHA256(pass)\r\n  hash = hash.toString()\r\n  console.log(hash)\r\n  VerificarLogin(user,hash)\r\n    .then((response) => { return JSON.stringify(response[0])})\r\n    .then((response) => { return JSON.parse(response)} )\r\n    .then( (response) => { \r\n      console.log(response);\r\n      const {user, name,productos, clasificacion, lotes, administrador, rol, ID_rol, pass} = response;\r\n      req.session.permissions = { productos, clasificacion, lotes , administrador}; // Asignando todos los valores al objeto permissions de la sesion\r\n      req.session.ID_rol = ID_rol; // Asignando ID_rol a la session\r\n      req.session.user = {user, name,pass};  // Asignando los valores al objeto user de la sesion\r\n      // Mandando informacion\r\n      res.send(JSON.stringify({ // Se manda la informacion al frontend para que lo almacene y así según eso realice ciertas acciones\r\n        permissions: { // Se manda los permisos del usuario\r\n          productos, \r\n          clasificacion, \r\n          lotes,  \r\n          administrador, \r\n          rol \r\n        }, \r\n        user: { // Se manda la información básica del usuario.\r\n          user, \r\n          name\r\n        }}\r\n        \r\n      ))\r\n    })\r\n    .catch( () => res.status(400).end());\r\n    \r\n})\r\n\r\n\r\nrouter.post('/changepasword', (req, res) => {\r\n    console.log(req.session.user.pass)\r\n})\r\n\r\n\r\nmodule.exports = router;\r\n"],"file":"auth.js"}