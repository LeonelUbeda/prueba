{"version":3,"sources":["../../src/Routes/clasificacion.js"],"names":["router","require","Router","get","req","res","console","log","session","categoriaQuery","tabla","columnas","desc","marcaQuery","subcategoriaQuery","foranea","ID_categoria","time","Promise","all","categoria","subcategoria","marca","schemaFull","schema","json","timeEnd","post","query","body","status","end","then","e","resp","send","JSON","stringify","id","err","borrar","connection","CreateConnection","fecha","Date","queryMovimiento","user","getFullYear","getMonth","getDate","response","variable","toLowerCase","busqueda","tipo","pagina","undefined","limite","condiciones","module","exports"],"mappings":"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","sourcesContent":["\r\nconst router = require('express').Router();\r\nimport AddToDatabase from '../ServerComponents/AddToDatabase/AddToDatabase';\r\nimport DeleteFromDatabase from '../ServerComponents/DeleteFromDatabase/DeleteFromDatabase';\r\nimport UpdateDatabase from '../ServerComponents/UpdateDatabase/UpdateDatabase';\r\nimport QueryDatabase from '../ServerComponents/QueryDatabase/QueryDatabase';\r\nimport { promises, readFileSync } from 'fs';\r\nimport GetSchema from '../ServerComponents/HandleSchema/GetSchema';\r\nimport CheckForeigns from '../ServerComponents/CheckForeigns/CheckForeigns';\r\nimport CreateConnection from '../ServerComponents/CreateConnection/CreateConnection';\r\n\r\n\r\n// const subcategoria  = [\r\n//     {\r\n//         id: 1,\r\n//         nombre: 'Lacteos',\r\n//         padre: 'Alimentos'\r\n//     },\r\n//     {\r\n//         id: 1,\r\n//         nombre: 'Carnes',\r\n//         padre: 'Alimentos'\r\n//     },\r\n//     {\r\n//         id: 1,\r\n//         nombre: 'Vegetales',\r\n//         padre: 'Alimentos'\r\n//     },\r\n//     {\r\n//         id: 1,\r\n//         nombre: 'Frutas',\r\n//         padre: 'Alimentos'\r\n//     }\r\n// ]\r\n\r\n\r\n\r\nrouter.get('/clasificacion/info',async(req, res) => {\r\n    console.log(req.session);\r\n        \r\n    const categoriaQuery = {\r\n        tabla: 'categoria',\r\n        columnas: ['nombre', 'id'],\r\n        desc: true\r\n    }\r\n    const marcaQuery = {\r\n        tabla: 'marca',\r\n        columnas: ['nombre', 'id'],\r\n        desc: true\r\n    }\r\n    const subcategoriaQuery = {\r\n      tabla: 'subcategoria',\r\n      desc: true,\r\n      columnas: ['nombre','ID_categoria','id'],\r\n      foranea: {\r\n        ID_categoria: {\r\n          tabla: 'categoria',\r\n          columnas: ['nombre']\r\n        }\r\n    }\r\n    };\r\n\r\n    console.time(\"Time this\");\r\n\r\n    const [categoria, subcategoria, marca] = await Promise.all([\r\n        QueryDatabase( categoriaQuery ),\r\n        QueryDatabase( subcategoriaQuery ),\r\n        QueryDatabase( marcaQuery )\r\n    ])\r\n\r\n    const schemaFull = GetSchema(),\r\n          schema = (({ categoria, subcategoria, marca }) => ({ subcategoria, categoria, marca }))(schemaFull);\r\n    res.json({categoria, subcategoria, marca, schema})\r\n    console.timeEnd(\"Time this\");\r\n   \r\n})\r\n\r\n\r\n\r\n\r\nrouter.post('/clasificacion/nuevo',async (req, res) => {\r\n\r\n    const query = req.body.query;\r\n\r\n    if(typeof query == 'undefined' && typeof query.tabla == 'undefined' ){\r\n        res.status(404).end();\r\n    }\r\n    \r\n    try{\r\n        await CheckForeigns(query).then(()=>AddToDatabase( query ).catch((e)=>res.status(404).end())).catch((e)=>res.status(404).end());\r\n        console.log(`Registro añadido a la tabla ${query.tabla} exitosamente`)\r\n        let resp = 'Elemento añadido exitosamente!';\r\n        res.send(JSON.stringify(resp))\r\n    }catch(e){\r\n        console.log(e)  \r\n        res.status(404).end();\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/clasificacion/editar', async (req, res) => {\r\n\r\n  const query = req.body.query;\r\n  if(typeof query == 'undefined' && typeof query.tabla == 'undefined' && typeof query.id == 'undefined' ){\r\n      res.status(404).end();\r\n  }\r\n  \r\n  await CheckForeigns(query).then(()=> \r\n    UpdateDatabase( query )\r\n      .then(()=> {\r\n        console.log(`Registro ${query.id} de la tabla ${query.tabla} editado exitosamente`)\r\n        let resp = 'Elemento editado exitosamente!';\r\n        res.send(JSON.stringify(resp));\r\n      })\r\n      .catch(err => {\r\n        console.log(err)  \r\n        res.status(404).end();\r\n    }))\r\n    .catch((e)=>res.status(404).end());\r\n});\r\n\r\n\r\n\r\nrouter.post('/clasificacion/eliminar' ,(req, res) => {\r\n    const {tabla, id} = req.body.query;\r\n    console.log(req.body.query)\r\n    const borrar = {\r\n        tabla: tabla,\r\n        id: id\r\n    }\r\n    \r\n    DeleteFromDatabase( borrar )\r\n    .then(() => {\r\n      if(tabla == 'lotes'){\r\n        const connection = CreateConnection,\r\n            fecha = new Date(),\r\n            queryMovimiento = `insert into movimientos (user, ID_lotes, SKU, tipo, fecha, cantidad ) \r\n            values ('${req.session.user.user}', ${borrar.id}, (Select SKU from lotes where ID_lotes = ${borrar.id} ), \r\n           1, '${fecha.getFullYear()}-${fecha.getMonth()+1}-${fecha.getDate()}',\r\n            (Select cantidad from lotes where ID_lotes = ${borrar.id} ));`;\r\n           \r\n           \r\n      connection.query(queryMovimiento); \r\n      }\r\n      \r\n\r\n\r\n    })\r\n    .then(() => res.send('OK'))\r\n    .catch((response) => {\r\n        res.status(404).end()\r\n    })\r\n\r\n     \r\n});\r\n\r\nrouter.post('/clasificacion/buscar/',async (req, res) =>{\r\n    for( let variable in req.body ){ // Cambia a minuscula todas las variables en req.body\r\n        typeof req.body[variable] == 'string' ? req.body[variable] = req.body[variable].toLowerCase() : null \r\n    }   \r\n\r\n    let {tabla, busqueda, tipo, pagina} = req.body;\r\n\r\n    if(typeof tabla === undefined || typeof busqueda === undefined  || typeof tipo === undefined) { // Si alguna variable no existe...\r\n        res.status(404).end()\r\n    }\r\n\r\n    const query = {\r\n        tabla:  tabla,\r\n        desc: true, \r\n        limite: 10,\r\n        //PAGE: poner esto en el router de buscar\r\n        pagina: pagina || 0\r\n    }\r\n    \r\n    query.condiciones = {};\r\n    query.condiciones[tipo] = busqueda;\r\n    switch (tabla) {\r\n        case 'categoria':\r\n            query.columnas = ['nombre', 'id']\r\n            break;\r\n        case 'subcategoria':\r\n            query.columnas = ['nombre','ID_categoria','id']\r\n            query.foranea = { \r\n                ID_categoria: {\r\n                    tabla: 'categoria',\r\n                    columnas: ['nombre']\r\n                }\r\n            }\r\n            break;\r\n        case 'marca':\r\n            query.columnas = ['nombre', 'id']\r\n            break;\r\n\r\n        default:\r\n            //res.send(\"NEL\")\r\n            break;\r\n    }\r\n    console.log(query);\r\n\r\n    if( tabla == 'todo' ){\r\n\r\n        const categoriaQuery = {\r\n            tabla: 'categoria',\r\n            columnas: ['nombre', 'id'],\r\n            desc: true,\r\n        }\r\n        \r\n        const marcaQuery = {\r\n            tabla: 'marca',\r\n            columnas: ['nombre', 'id'],\r\n            desc: true\r\n        }\r\n        const subcategoriaQuery = {\r\n          tabla: 'subcategoria',\r\n          desc: true,\r\n          columnas: ['nombre','ID_categoria','id'],\r\n          foranea: {\r\n            ID_categoria: {\r\n              tabla: 'categoria',\r\n              columnas: ['nombre']\r\n            }\r\n        }\r\n        };\r\n   \r\n        categoriaQuery.condiciones = {}\r\n        marcaQuery.condiciones = {}\r\n        subcategoriaQuery.condiciones = {}\r\n\r\n\r\n        categoriaQuery.condiciones[tipo] = busqueda\r\n        marcaQuery.condiciones[tipo]= busqueda\r\n        subcategoriaQuery.condiciones[tipo] = busqueda\r\n        const [categoria, subcategoria, marca] = await Promise.all([\r\n            QueryDatabase( categoriaQuery ),\r\n            QueryDatabase( subcategoriaQuery ),\r\n            QueryDatabase( marcaQuery )\r\n        ])\r\n        res.json({categoria, subcategoria, marca})\r\n    \r\n    }else{\r\n        QueryDatabase ( query )\r\n        .then((response) => {\r\n            res.send(JSON.stringify(response))\r\n        })\r\n    }\r\n})\r\nmodule.exports = router;\r\n"],"file":"clasificacion.js"}