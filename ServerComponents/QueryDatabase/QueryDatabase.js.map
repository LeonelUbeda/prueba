{"version":3,"sources":["../../../src/ServerComponents/QueryDatabase/QueryDatabase.js"],"names":["QueryDatabase","obj","Promise","resolve","reject","forCheck","forNombres","hasOwnProperty","orden","pagina","limite","borrados","columnas","length","Error","nombre","foranea","push","id","connection","CreateConnection","then","sch","err","schema","tabla","idname","mysqlQuery","columnaQuery","columna","includes","columnaSub","substr","condicionQuery","condicion","condiciones","idFor","referencedTable","mysql","escape","desc","query","error","results","fields","response","body","count","Math","ceil"],"mappings":"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","sourcesContent":["import CreateConnection from './../CreateConnection/CreateConnection';\r\nimport mysql from 'mysql';\r\nimport HandleSchema from '../HandleSchema/HandleSchema';\r\n/**\r\n * La función para hacer una query.\r\n *\r\n *  @param {number} obj.pagina El número de la página\r\n *  @param {array.<string>} obj.columnas Las columnas a ser buscadas, en su respectivo orden\r\n *  @param {object} foranea Un objeto con objetos que representan las columnas que pertenecen a otra tabla.\r\n *  @param {array} obj.orden La columna por la cual se va a ordenar\r\n *  @param {boolean} obj.desc Invertir el orden del buscar\r\n *  @param {number} obj.limite La cantidad de resultados por query.\r\n *  @param { boolean } obj.borrados Mostrar los borrados o no. \r\n * @return {Array } El array con los resultados.\r\n */\r\nconst QueryDatabase = ( obj ) => {\r\n  return new Promise( async( resolve, reject ) => {\r\n    try {\r\n\r\n      let forCheck = false,\r\n          forNombres = [];\r\n\r\n      //Valores predeterminados\r\n      if ( !obj.hasOwnProperty('orden') ) {\r\n        obj.orden = 'id';\r\n      }\r\n      if ( !obj.hasOwnProperty('pagina')) {\r\n        obj.pagina = 0;\r\n      }\r\n      if ( !obj.hasOwnProperty('limite')) {\r\n        obj.limite = 10\r\n      }\r\n      if ( !obj.hasOwnProperty('borrados')){\r\n        obj.borrados = false;\r\n      }\r\n      if ( !obj.hasOwnProperty('columnas') || obj.columnas.length == 0 ) {\r\n        throw new Error ('Error: no se envio un array en .columnas')\r\n      }\r\n\r\n      \r\n\r\n      if (obj.hasOwnProperty('foranea')) {\r\n        forCheck = true;\r\n        for( let nombre in obj.foranea ) {\r\n          forNombres.push(nombre);\r\n        }\r\n      }\r\n\r\n      // Si se intenta modificar el registro 0, da un error\r\n      if(obj.id == 0) {\r\n        throw new Error('905: No pueden editar el registro con ID 0');\r\n      }\r\n\r\n      //Crea el objeto para la conexión e importa el schema\r\n      const connection = CreateConnection,\r\n            schema = await HandleSchema()\r\n              .then( sch =>  sch )\r\n              .catch( err => {throw err});\r\n\r\n        //Revisa si existe la tabla\r\n      if ( !schema.hasOwnProperty(obj.tabla) )\r\n      {\r\n        throw new Error('902: Esa tabla no existe en el schema');\r\n      }\r\n\r\n      //Asigna el nombre de la tabla al objeto\r\n      obj.idname = schema[obj.tabla].id; \r\n\r\n      // Inicializa la query con el update\r\n      let mysqlQuery = `select `;\r\n\r\n      // Si no se envian atributos, por defecto buscara todo\r\n      if ( !obj.hasOwnProperty('columnas') ) {\r\n        mysqlQuery += `* from ${obj.tabla} `;\r\n      }\r\n      // De lo contrario, itera sobre todos los atributos\r\n      else {\r\n        let columnaQuery = '';\r\n        for( let columna of obj.columnas ) {\r\n          //Si es id, se pone automaticamente el nombre del id\r\n          if ( columna != 'id'  ) {\r\n            \r\n            if ( forNombres.includes(columna) ){\r\n              columnaQuery += `${ forCheck ? `${obj.tabla}.` : '' }${columna} , `;\r\n              for( let columnaSub of obj.foranea[columna].columnas) {\r\n                \r\n                columnaQuery += `${obj.foranea[columna].tabla}.${columnaSub} as '${obj.foranea[columna].tabla}__${columnaSub}' , `;\r\n              }\r\n            }\r\n            else {\r\n              columnaQuery += `${ forCheck ? `${obj.tabla}.` : '' }${columna} , `;\r\n            }\r\n          }\r\n          else {\r\n            columnaQuery += `${ forCheck ? `${obj.tabla}.` : '' }${ obj.idname } as id , `;\r\n          }\r\n        }\r\n\r\n        //Error si no hubo ningun campo\r\n        if( columnaQuery == '' ) {\r\n          throw new Error('905: Mandaron un array vacio para los atributos');\r\n        }\r\n\r\n        columnaQuery = columnaQuery.substr (0, columnaQuery.length-2);\r\n\r\n        mysqlQuery += `${columnaQuery} from ${obj.tabla} `;\r\n\r\n        if( forCheck ) {\r\n          for( let columna of forNombres ){\r\n            mysqlQuery += `join ${obj.foranea[columna].tabla} on ${obj.tabla}.${columna} = ${obj.foranea[columna].tabla}.${columna} `;\r\n          }\r\n        }\r\n        \r\n        \r\n\r\n      }\r\n\r\n\r\n      //Las condiciones where. Si no se enviaron, solo se pone que no muestre el 0\r\n      if ( !obj.hasOwnProperty( 'condiciones' ) ) {\r\n        mysqlQuery += `where ${obj.idname} != 0 ${ obj.borrados ? '': `and ${obj.tabla}.borrado = false `}`;\r\n      }\r\n      else {\r\n        \r\n        //Inicializa condicion\r\n        let condicionQuery = '';\r\n\r\n        //Itera sobre todos los atributos de condiciones\r\n        for( const condicion in obj.condiciones ) {\r\n          if ( obj.condiciones[condicion] != '' ){\r\n           \r\n            if ( condicion.substr(0,4) == 'for_' ) {\r\n\r\n  \r\n              const idFor = condicion.substr(4),\r\n                    referencedTable = obj.foranea[idFor].tabla;\r\n\r\n              condicionQuery += `upper(${referencedTable}.nombre) regexp ${mysql.escape(obj.condiciones[condicion])} and `;\r\n              \r\n            }\r\n            else if ( condicion != 'id' ) {\r\n              condicionQuery += `upper(${obj.tabla}.${condicion}) regexp ${mysql.escape(obj.condiciones[condicion])} and `;\r\n            }\r\n            else {\r\n              condicionQuery += `${obj.tabla}.${obj.idname} = ${mysql.escape(obj.condiciones[condicion])} and `;\r\n            }\r\n          }\r\n        }\r\n\r\n        \r\n\r\n        //Si se mando un objeto condicion vacio, se retorna un error\r\n\r\n        //Se quita el ultimo and y se pone esta seccion a la query\r\n        mysqlQuery += `where ${condicionQuery} ${obj.idname} != 0 ${ obj.borrados ? '': `and ${obj.tabla}.borrado = false `}`;\r\n      \r\n\r\n      }\r\n\r\n      // Orden\r\n      mysqlQuery += `order by ${ ( obj.orden == 'id' )? `${obj.tabla}.${obj.idname}` : `${obj.tabla}.${obj.orden}` } ${ obj.desc ? 'desc ' : '' } `;\r\n      \r\n      // Pagina\r\n      mysqlQuery += `limit ${ obj.limite } ${ obj.pagina == 0 ? '' : `offset ${ (obj.pagina ) * obj.limite  }` };\\n`;\r\n\r\n      //Sacar count de la tabla \r\n      mysqlQuery += `select count(*) as count from ${ obj.tabla };`\r\n      // Realiza la query\r\n\r\n      \r\n      connection.query( mysqlQuery, (error, results, fields) => {\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n        else {\r\n          \r\n          const response = {};\r\n          response.body = results[0];\r\n          response.count = Math.ceil( results[1][0].count / obj.limite ) - 1;\r\n\r\n          resolve(response);\r\n        }\r\n      });\r\n\r\n    }\r\n    catch (error) {\r\n      resolve(error);\r\n    }\r\n\r\n  });\r\n}\r\n\r\nexport default QueryDatabase;\r\n"],"file":"QueryDatabase.js"}