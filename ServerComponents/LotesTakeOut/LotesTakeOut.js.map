{"version":3,"sources":["../../../src/ServerComponents/LotesTakeOut/LotesTakeOut.js"],"names":["LotesTakeOut","obj","Promise","resolve","reject","query","tabla","columnas","condiciones","sku","orden","limite","fecha","Date","mysqlQuery","mysqlMovimiento","acumulador","cantidad","lotesSacados","cantidadLotes","sacadosLotes","results","body","lote","push","ID_lotes","nuevaCantidad","user","getFullYear","getMonth","getDate","substr","length","console","log","connection","error","fields","response","ids","sacados"],"mappings":"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","sourcesContent":["import CreateConnection from './../CreateConnection/CreateConnection';\r\nimport HandleSchema from '../HandleSchema/HandleSchema';\r\nimport QueryDatabase from '../QueryDatabase/QueryDatabase';\r\nimport connection from './../CreateConnection/CreateConnection';\r\n\r\n/**\r\n * Funcion para retirar producto unitario de los lotes.\r\n *\r\n * \r\n * @returns\r\n */\r\nconst LotesTakeOut = ( obj ) => {\r\n  return new Promise( async( resolve, reject ) => {\r\n    try {\r\n\r\n      const query = {\r\n        tabla: 'lotes',\r\n        columnas: ['cantidad','ID_lotes'],\r\n        condiciones: {\r\n          sku: obj.sku\r\n        },\r\n        orden: 'fecha_caducidad',\r\n        limite: 400,\r\n        \r\n      },\r\n      fecha = new Date();\r\n      \r\n\r\n      let mysqlQuery = '',\r\n          mysqlMovimiento = 'insert into movimientos (user, ID_lotes, SKU, tipo, fecha, cantidad ) values ',\r\n          acumulador = obj.cantidad,\r\n          lotesSacados = [],\r\n          cantidadLotes = [],\r\n          sacadosLotes = [];\r\n\r\n      const results = await QueryDatabase(query);\r\n\r\n\r\n      for( let lote of results.body ) {\r\n        if(lote.cantidad != 0) {\r\n          lotesSacados.push(lote.ID_lotes);\r\n          if ( lote.cantidad > acumulador ) {\r\n\r\n            const nuevaCantidad = lote.cantidad - acumulador;\r\n            sacadosLotes.push(acumulador);\r\n            \r\n            cantidadLotes.push(nuevaCantidad);\r\n\r\n            mysqlMovimiento += `('${obj.user}', ${lote.ID_lotes}, '${obj.sku}', 2, '${fecha.getFullYear()}-${fecha.getMonth()+1}-${fecha.getDate()}', ${acumulador}), `\r\n\r\n            acumulador = 0;\r\n            mysqlQuery += `update lotes set cantidad = ${nuevaCantidad}${nuevaCantidad == 0 ? ', marcarSalida = 1' : '' } where ID_lotes = ${lote.ID_lotes};\\n`;\r\n            break;\r\n          }\r\n          else {\r\n            acumulador = acumulador - lote.cantidad;\r\n            sacadosLotes.push(lote.cantidad);\r\n            cantidadLotes.push(0);\r\n            mysqlQuery += `update lotes set cantidad = 0, marcarSalida = 1 where ID_lotes = ${lote.ID_lotes};\\n`;\r\n            mysqlMovimiento += `('${obj.user}', ${lote.ID_lotes}, '${obj.sku}', 2, '${fecha.getFullYear()}-${fecha.getMonth()+1}-${fecha.getDate()}', ${lote.cantidad}), `\r\n            if (acumulador == 0) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        \r\n      }\r\n      mysqlMovimiento = mysqlMovimiento.substr(0, mysqlMovimiento.length -2 )+';';\r\n      mysqlQuery = mysqlQuery + mysqlMovimiento;\r\n\r\n      console.log(mysqlMovimiento);\r\n\r\n      if(acumulador != 0) {\r\n        reject();\r\n      }\r\n      else {\r\n        connection.query(mysqlQuery, (error, results, fields) => {\r\n          if (error) {\r\n            reject(error);\r\n          }\r\n          else {\r\n           const response = {\r\n             ids : lotesSacados,\r\n             cantidad : cantidadLotes,\r\n             sacados: sacadosLotes\r\n           } \r\n\r\n           resolve(response);\r\n           \r\n          }\r\n        });\r\n      }\r\n\r\n\r\n\r\n\r\n    }\r\n    catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport default LotesTakeOut;\r\n"],"file":"LotesTakeOut.js"}