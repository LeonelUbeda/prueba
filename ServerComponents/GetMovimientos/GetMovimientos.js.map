{"version":3,"sources":["../../../src/ServerComponents/GetMovimientos/GetMovimientos.js"],"names":["GetMovimientos","obj","Promise","resolve","reject","connection","CreateConnection","x","Date","mysqlQuery","filtroFecha","getFullYear","getMonth","getDate","filtroSKU","console","log","query","error","results","fields","response","tupla","tipo","eliminados","cantidad","sacados","ingresados"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA;;;;;;AAMA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAEC,GAAF,EAAY;AACjC,SAAO,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAa,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAClB,kBAAI;AACF;AACMC,gBAAAA,UAFJ,GAEiBC,4BAFjB;AAKIC,gBAAAA,CALJ,GAKQ,IAAIC,IAAJ,EALR;AAOEC,gBAAAA,UAPF;;AASF,oBAAKR,GAAG,CAACS,WAAJ,IAAmB,MAAxB,EAAiC;AAC/BD,kBAAAA,UAAU,yCAAkCR,GAAG,CAACS,WAAtC,mBAA0DH,CAAC,CAACI,WAAF,EAA1D,cAA6EJ,CAAC,CAACK,QAAF,KAAa,CAA1F,cAA+FL,CAAC,CAACM,OAAF,EAA/F,WAAV;AACD;;AACD,oBAAKZ,GAAG,CAACa,SAAJ,IAAiB,MAAtB,EAA8B;AAC5BL,kBAAAA,UAAU,oBAAaR,GAAG,CAACa,SAAjB,UAAV;AACD;;AAEDL,gBAAAA,UAAU,8CAAV;AACAM,gBAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AAEAJ,gBAAAA,UAAU,CAACY,KAAX,CAAkBR,UAAlB,EAA8B,UAACS,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AACxD,sBAAIF,KAAJ,EAAW;AACTd,oBAAAA,MAAM,CAACc,KAAD,CAAN;AACD,mBAFD,MAGK;AACH,wBAAMG,QAAQ,GAAG,EAAjB;AADG;AAAA;AAAA;;AAAA;AAGH,2CAAmBF,OAAnB,8HAA6B;AAAA,4BAAnBG,KAAmB;;AAC3B,4BAAIA,KAAK,CAACC,IAAN,IAAc,SAAlB,EAA8B;AAC5BF,0BAAAA,QAAQ,CAACG,UAAT,GAAsBF,KAAK,CAACG,QAA5B;AACD;;AACD,4BAAIH,KAAK,CAACC,IAAN,IAAc,QAAlB,EAA6B;AAC3BF,0BAAAA,QAAQ,CAACK,OAAT,GAAmBJ,KAAK,CAACG,QAAzB;AACD;;AACD,4BAAIH,KAAK,CAACC,IAAN,IAAc,WAAlB,EAAgC;AAC9BF,0BAAAA,QAAQ,CAACM,UAAT,GAAsBL,KAAK,CAACG,QAA5B;AACD;AACF;AAbE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcHtB,oBAAAA,OAAO,CAACkB,QAAD,CAAP;AAED;AACF,iBArBD;AAuBD,eA1CD,CA2CA,OAAOH,KAAP,EAAc;AACZd,gBAAAA,MAAM,CAACc,KAAD,CAAN;AACD;;AA9CiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAAP;AAgDD,CAjDD;;eAmDelB,c","sourcesContent":["import CreateConnection from './../CreateConnection/CreateConnection';\r\n\r\n/**\r\n * Funcion para conseguir los movimientos de lotes.\r\n *\r\n * \r\n * @returns\r\n */\r\nconst GetMovimientos = ( obj  ) => {\r\n  return new Promise( async( resolve, reject ) => {\r\n    try {\r\n      //Crea el objeto para la conexiÃ³n e importa el schema\r\n      const connection = CreateConnection;\r\n  \r\n\r\n      const x = new Date();\r\n\r\n      let mysqlQuery = `select sum(cantidad) as cantidad, tipo from movimientos where `\r\n      \r\n      if ( obj.filtroFecha != 'none' ) {\r\n        mysqlQuery += `date_add(fecha, interval 1 ${obj.filtroFecha}) >= '${x.getFullYear()}-${x.getMonth()+1}-${x.getDate()}' and `;\r\n      }\r\n      if ( obj.filtroSKU != 'none') {\r\n        mysqlQuery += `SKU = ${obj.filtroSKU} and `;\r\n      }\r\n\r\n      mysqlQuery += `borrado = 0 group by tipo order by tipo;`\r\n      console.log(mysqlQuery);\r\n\r\n      connection.query( mysqlQuery, (error, results, fields) => {\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n        else {\r\n          const response = {};\r\n\r\n          for ( let tupla of results ) {\r\n            if( tupla.tipo == 'Borrado' ) {\r\n              response.eliminados = tupla.cantidad;\r\n            }\r\n            if( tupla.tipo == 'Sacado' ) {\r\n              response.sacados = tupla.cantidad ;\r\n            }\r\n            if( tupla.tipo == 'Ingresado' ) {\r\n              response.ingresados = tupla.cantidad;\r\n            }\r\n          }\r\n          resolve(response);\r\n          \r\n        }\r\n      });\r\n\r\n    }\r\n    catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport default GetMovimientos;\r\n\r\n\r\n\r\n\r\n\r\n"],"file":"GetMovimientos.js"}