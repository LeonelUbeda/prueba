{"version":3,"sources":["../../../src/ServerComponents/AddToDatabase/AddToDatabase.js"],"names":["AddToDatabase","obj","Promise","resolve","reject","then","sch","err","schema","hasOwnProperty","tabla","Error","id","connection","CreateConnection","fecha","Date","query","error","results","fields","console","log","queryMovimiento","usernameMov","sku","getFullYear","getMonth","getDate","cantidad"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA;;;;;;AAMA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAEC,GAAF,EAAW;AAC/B,SAAO,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAa,iBAAQC,OAAR,EAAiBC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGK,gCACRC,IADQ,CACF,UAAAC,GAAG;AAAA,uBAAKA,GAAL;AAAA,eADD,WAED,UAAAC,GAAG,EAAI;AAAC,sBAAMA,GAAN;AAAU,eAFjB,CAHL;;AAAA;AAGVC,cAAAA,MAHU;;AAAA,kBAOVA,MAAM,CAACC,cAAP,CAAsBR,GAAG,CAACS,KAA1B,CAPU;AAAA;AAAA;AAAA;;AAAA,oBASR,IAAIC,KAAJ,CAAU,uCAAV,CATQ;;AAAA;AAYhBV,cAAAA,GAAG,CAACW,EAAJ,GAASJ,MAAM,CAACP,GAAG,CAACS,KAAL,CAAN,CAAkBE,EAA3B,CAZgB,CAchB;;AACMC,cAAAA,UAfU,GAeGC,4BAfH,EAgBVC,KAhBU,GAgBF,IAAIC,IAAJ,EAhBE;AAgBS,eAhBT,CAkBhB;;AACA,wDAA0Bf,GAA1B,EACCI,IADD,CACO,UAAAY,KAAK;AAAA,uBAAIJ,UAAU,CAACI,KAAX,CAAkBA,KAAlB,EAAyB,UAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAEnE;AACA,sBAAIF,KAAJ,EAAW;AACTd,oBAAAA,MAAM,CAACc,KAAD,CAAN;AACD,mBAFD,MAIK;AACH;AACDf,oBAAAA,OAAO,CAACgB,OAAD,CAAP;;AAEA,wBAAGlB,GAAG,CAACS,KAAJ,IAAa,OAAhB,EACA;AACEW,sBAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,0BAAMI,eAAe,yGACVtB,GAAG,CAACuB,WADM,8EACyEvB,GAAG,CAACwB,GAD7E,gCAEhBV,KAAK,CAACW,WAAN,EAFgB,cAEOX,KAAK,CAACY,QAAN,KAAiB,CAFxB,cAE6BZ,KAAK,CAACa,OAAN,EAF7B,gBAEkD3B,GAAG,CAAC4B,QAFtD,OAArB;AAIDhB,sBAAAA,UAAU,CAACI,KAAX,CAAiBM,eAAjB;AAEA;;AACD,2BAAO,KAAP;AACA;AACF,iBAvBe,CAAJ;AAAA,eADZ;AAnBgB;AAAA;;AAAA;AAAA;AAAA;AA+ChBnB,cAAAA,MAAM,aAAN;;AA/CgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAAP;AAmDD,CApDD;;eAsDeJ,a","sourcesContent":["import AddToDatabaseCreateQuery from './AddToDatabaseCreateQuery';\r\nimport CreateConnection from './../CreateConnection/CreateConnection';\r\nimport HandleSchema from '../HandleSchema/HandleSchema';\r\n\r\n/**\r\n * La función genérica para añadir un objeto a la base de datos.\r\n *\r\n * @param Object Cada propiedad del objeto representa un conjunto columna/valor. La propiedad .tabla esta reservada para el nombre de la tabla. La propiedad .id esta reservada pero no se envia.\r\n * @returns\r\n */\r\nconst AddToDatabase = ( obj ) => {\r\n  return new Promise( async ( resolve, reject ) => {\r\n    try {\r\n\r\n      const schema = await HandleSchema()\r\n                  .then( sch =>  sch )\r\n                  .catch( err => {throw err}); \r\n\r\n      if ( !schema.hasOwnProperty(obj.tabla) )\r\n      {\r\n        throw new Error('902: Esa tabla no existe en el schema');\r\n      }\r\n\r\n      obj.id = schema[obj.tabla].id; \r\n\r\n      //Crea el objeto para la conexión\r\n      const connection = CreateConnection,\r\n            fecha = new Date();;\r\n\r\n      //Realiza la query\r\n      AddToDatabaseCreateQuery( obj )\r\n      .then( query => connection.query( query, (error, results, fields) => {\r\n\r\n        // Si hay un error, devuelve la promesa fallida\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n\r\n        else {\r\n          // De lo contrario, devuelve los resultados\r\n         resolve(results);\r\n\r\n         if(obj.tabla == 'lotes')\r\n         {\r\n           console.log(results);\r\n           const queryMovimiento = `insert into movimientos (user, ID_lotes, SKU, tipo, fecha, cantidad ) \r\n           values ('${obj.usernameMov}', (Select ID_lotes from lotes order by ID_lotes desc limit 1) ,'${obj.sku}', \r\n          3, '${fecha.getFullYear()}-${fecha.getMonth()+1}-${fecha.getDate()}', ${obj.cantidad});`\r\n           \r\n          connection.query(queryMovimiento); \r\n           \r\n         }\r\n         return false;\r\n        }\r\n      }));\r\n\r\n    }\r\n    catch (error) {\r\n      reject(error);\r\n    }\r\n    \r\n  });\r\n};\r\n\r\nexport default AddToDatabase;\r\n"],"file":"AddToDatabase.js"}