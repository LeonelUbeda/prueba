{"version":3,"sources":["../../../src/ServerComponents/HandleSchema/SchemaQuery.js"],"names":["SchemaQuery","Promise","resolve","reject","mysqlQueryColumns","process","db","database","mysqlQueryKeys","connection","CreateConnection","query","error","results","fields","schema","tupla","TABLE_NAME","COLUMN_NAME","DATA_TYPE","tipo","longitud","NUMERIC_PRECISION","parsed","COLUMN_TYPE","match","replace","split","valores","CHARACTER_MAXIMUM_LENGTH","lastUpdate","Date","now","CONSTRAINT_NAME","id","substr","foranea","REFERENCED_TABLE_NAME","fs","writeFile","path","join","__dirname","JSON","stringify","err"],"mappings":"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","sourcesContent":["import CreateConnection from '../CreateConnection/CreateConnection';\r\nimport fs  from 'fs';\r\nimport path from 'path';\r\n\r\n\r\n\r\n\r\n/**\r\n *Funcion que hace una query a la base de datos para obtener una copia del schema en formato json.\r\n *\r\n */\r\nconst SchemaQuery =  () => {\r\n  return new Promise( ( resolve, reject ) => {\r\n\r\n    //Se crea el string de la query y el objeto de a conexion\r\n    const mysqlQueryColumns = `select TABLE_NAME, COLUMN_NAME, COLUMN_TYPE, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, COLUMN_KEY from Information_schema.columns where TABLE_SCHEMA = '${process.db.database}'`,\r\n          mysqlQueryKeys = `select CONSTRAINT_NAME, TABLE_NAME, COLUMN_NAME, REFERENCED_TABLE_NAME from INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_SCHEMA = '${process.db.database}'`,\r\n          connection  = CreateConnection;\r\n\r\n\r\n    // Se realiza la query\r\n      connection.query( mysqlQueryColumns, (error, results, fields) => {\r\n        //Si no hubo error, se hace un objeto schema, donde cada nombre de la tabla es una \r\n        //propiedad del objeto, y cada columna es una propiedad anidada con el tipo de dato que es.\r\n\r\n        if (error) {\r\n          reject(error);\r\n          return null;  \r\n        } \r\n        \r\n        \r\n        const schema = {};\r\n\r\n        \r\n        for( let tupla of results ) {\r\n          // Si aun no se ha creado la propiedad, se crea\r\n          if( !(tupla.TABLE_NAME in schema )) {\r\n            schema[tupla.TABLE_NAME] = {};\r\n          }\r\n\r\n          if(tupla.COLUMN_NAME != 'borrado') {\r\n\r\n             //Pone cada propiedad anidada, que corresponde a la columna, con su respectivo tipo\r\n            schema[tupla.TABLE_NAME][tupla.COLUMN_NAME] = {};\r\n            switch (tupla.DATA_TYPE) {\r\n              case 'int':\r\n                  schema[tupla.TABLE_NAME][tupla.COLUMN_NAME].tipo = 'int';\r\n                  schema[tupla.TABLE_NAME][tupla.COLUMN_NAME].longitud = tupla.NUMERIC_PRECISION;\r\n                break;\r\n              case 'decimal':\r\n                schema[tupla.TABLE_NAME][tupla.COLUMN_NAME].tipo = 'moneda';\r\n                schema[tupla.TABLE_NAME][tupla.COLUMN_NAME].longitud = tupla.NUMERIC_PRECISION;\r\n                break;\r\n              case 'date':\r\n                schema[tupla.TABLE_NAME][tupla.COLUMN_NAME].tipo = 'fecha';\r\n                schema[tupla.TABLE_NAME][tupla.COLUMN_NAME].longitud = 11;\r\n                break;\r\n              case 'tinyint':\r\n                schema[tupla.TABLE_NAME][tupla.COLUMN_NAME].tipo = 'boolean';\r\n                break;\r\n  \r\n              case 'enum':\r\n                let parsed = tupla.COLUMN_TYPE;\r\n                parsed = parsed.match(/'.+'/)[0];\r\n                parsed = parsed.replace(/'/g, '').split(',');\r\n                schema[tupla.TABLE_NAME][tupla.COLUMN_NAME].valores=parsed;\r\n              case 'varchar':\r\n              case 'char':\r\n                schema[tupla.TABLE_NAME][tupla.COLUMN_NAME].tipo = tupla.DATA_TYPE;\r\n                schema[tupla.TABLE_NAME][tupla.COLUMN_NAME].longitud = tupla.CHARACTER_MAXIMUM_LENGTH;\r\n               break;\r\n            }\r\n          }\r\n         \r\n\r\n\r\n\r\n        }\r\n\r\n        //Se guarda la ultima vez que se actualizo el schema\r\n        schema.lastUpdate = Date.now();\r\n\r\n        connection.query( mysqlQueryKeys, (error, results, fields) => {\r\n          for( let tupla of results ) {\r\n            \r\n            if (error) {\r\n              reject(error);\r\n              return null;  \r\n            } \r\n\r\n            if( tupla.CONSTRAINT_NAME == 'PRIMARY') {\r\n              schema[tupla.TABLE_NAME].id = tupla.COLUMN_NAME;\r\n            }\r\n            else if (tupla.CONSTRAINT_NAME.substr(0,3) == \"FK_\"){\r\n              schema[tupla.TABLE_NAME][tupla.COLUMN_NAME].foranea = tupla.REFERENCED_TABLE_NAME;\r\n            }\r\n          }\r\n\r\n          //Se guarda el schema en formato JSON\r\n          fs.writeFile( path.join( __dirname, '../../ServerFiles/Schema.json'), JSON.stringify(schema), (err) => {\r\n\r\n            if (err) {\r\n              reject(err)\r\n              return null;\r\n            };\r\n\r\n          })\r\n          resolve(schema);\r\n\r\n        });\r\n\r\n      });\r\n\r\n    });\r\n  \r\n\r\n   \r\n\r\n}\r\n\r\nexport default SchemaQuery;\r\n"],"file":"SchemaQuery.js"}