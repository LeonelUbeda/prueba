{"version":3,"sources":["../../../src/ServerComponents/HandleSchema/HandleSchema.js"],"names":["updateTime","HandleSchema","Promise","resolve","reject","process","hasOwnProperty","schema","lastUpdate","Date","now","then","schemaRaw","path","join","__dirname","JSON","parse","err"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAGA,IAAMA,UAAU,GAAG,MAAnB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,QAAIC,OAAO,CAACC,cAAR,CAAuB,QAAvB,CAAJ,EAAsC;AACpC,UAAKD,OAAO,CAACE,MAAR,CAAeC,UAAf,GAA4BR,UAA5B,GAAyCS,IAAI,CAACC,GAAL,EAA9C,EAA2D;AAEzDP,QAAAA,OAAO,CAACE,OAAO,CAACE,MAAT,CAAP;AACD,OAHD,MAIK;AAEH,uCACGI,IADH,CACS,UAAAJ,MAAM,EAAI;AAEfF,UAAAA,OAAO,CAACE,MAAR,GAAiBA,MAAjB;AACAJ,UAAAA,OAAO,CAACE,OAAO,CAACE,MAAT,CAAP;AACD,SALH;AAOD;AACF,KAfD,MAiBK;AACH,UAAI;AACF,YAAMK,SAAS,GAAG,sBAAaC,iBAAKC,IAAL,CAAWC,SAAX,EAAsB,+BAAtB,CAAb,EAAqE,MAArE,CAAlB;AAAA,YACMR,MAAM,GAAGS,IAAI,CAACC,KAAL,CAAWL,SAAX,CADf;;AAGA,YAAKL,MAAM,CAACC,UAAP,GAAoBR,UAApB,GAAiCS,IAAI,CAACC,GAAL,EAAtC,EAAkD;AAChD,yCACCC,IADD,CACO,UAAAJ,MAAM,EAAI;AACfF,YAAAA,OAAO,CAACE,MAAR,GAAiBA,MAAjB;AACAJ,YAAAA,OAAO,CAACE,OAAO,CAACE,MAAT,CAAP;AACD,WAJD;AAKD,SAND,MAOK;AACHF,UAAAA,OAAO,CAACE,MAAR,GAAiBA,MAAjB;AAEAJ,UAAAA,OAAO,CAAEI,MAAF,CAAP;AACD;AACF,OAhBD,CAiBA,OAAMW,GAAN,EAAW;AACT,uCACGP,IADH,CACS,UAAAJ,MAAM,EAAI;AAEfF,UAAAA,OAAO,CAACE,MAAR,GAAiBA,MAAjB;AACAJ,UAAAA,OAAO,CAACE,OAAO,CAACE,MAAT,CAAP;AACD,SALH;AAMD;AAEF;AACJ,GA/CM,CAAP;AAiDD,CAlDD;;eAoDeN,Y","sourcesContent":["import SchemaQuery from './SchemaQuery';\r\nimport { readFileSync } from 'fs';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\nconst updateTime = 300000;\r\n\r\nconst HandleSchema = () => {\r\n  return new Promise((resolve, reject) => {\r\n\r\n      if (process.hasOwnProperty('schema')) {\r\n        if ( process.schema.lastUpdate + updateTime < Date.now() ) {\r\n\r\n          resolve(process.schema);\r\n        }\r\n        else {\r\n\r\n          SchemaQuery()\r\n            .then( schema => {\r\n\r\n              process.schema = schema;\r\n              resolve(process.schema);\r\n            });\r\n\r\n        }\r\n      }\r\n\r\n      else {\r\n        try {\r\n          const schemaRaw = readFileSync(path.join( __dirname, '../../ServerFiles/Schema.json'), 'utf8'),\r\n                schema = JSON.parse(schemaRaw); \r\n\r\n          if ( schema.lastUpdate + updateTime < Date.now()) {\r\n            SchemaQuery()\r\n            .then( schema => {\r\n              process.schema = schema;\r\n              resolve(process.schema);\r\n            });\r\n          }\r\n          else {\r\n            process.schema = schema;\r\n\r\n            resolve( schema);\r\n          }\r\n        }\r\n        catch(err) {\r\n          SchemaQuery()\r\n            .then( schema => {\r\n\r\n              process.schema = schema;\r\n              resolve(process.schema);\r\n            });\r\n        }\r\n\r\n      }\r\n  });\r\n\r\n};\r\n\r\nexport default HandleSchema;\r\n"],"file":"HandleSchema.js"}