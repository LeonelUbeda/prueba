{"version":3,"sources":["../../../src/ServerComponents/UpdateDatabase/UpdateDatabase.js"],"names":["UpdateDatabase","obj","Promise","resolve","reject","id","Error","connection","CreateConnection","then","sch","schema","hasOwnProperty","tabla","idname","mysqlQuery","columnaQuery","columna","mysql","escape","substr","length","query","error","results","fields"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA;;;;;;AAMA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAEC,GAAF,EAAW;AAChC,SAAO,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAa,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,oBAGbH,GAAG,CAACI,EAAJ,IAAU,CAHG;AAAA;AAAA;AAAA;;AAAA,oBAIR,IAAIC,KAAJ,CAAU,4CAAV,CAJQ;;AAAA;AAQVC,cAAAA,UARU,GAQGC,4BARH;AAAA;AAAA,qBASK,gCACdC,IADc,CACR,UAAAC,GAAG;AAAA,uBAAKA,GAAL;AAAA,eADK,CATL;;AAAA;AASVC,cAAAA,MATU;;AAAA,kBAaVA,MAAM,CAACC,cAAP,CAAsBX,GAAG,CAACY,KAA1B,CAbU;AAAA;AAAA;AAAA;;AAAA,oBAeR,IAAIP,KAAJ,CAAU,uCAAV,CAfQ;;AAAA;AAkBhB;AACAL,cAAAA,GAAG,CAACa,MAAJ,GAAaH,MAAM,CAACV,GAAG,CAACY,KAAL,CAAN,CAAkBR,EAA/B,CAnBgB,CAqBhB;;AACIU,cAAAA,UAtBY,oBAsBYd,GAAG,CAACY,KAtBhB,YAuBZG,YAvBY,GAuBG,EAvBH,EAyBhB;;AACA,mBAAWC,OAAX,IAAsBhB,GAAtB,EAA4B;AAC1B,oBAAKgB,OAAO,IAAI,OAAX,IAAsBA,OAAO,IAAI,IAAjC,IAAyCA,OAAO,IAAI,QAAzD,EAAqE;AACnED,kBAAAA,YAAY,cAAOC,OAAP,gBAAoBC,kBAAMC,MAAN,CAAalB,GAAG,CAACgB,OAAD,CAAhB,CAApB,QAAZ;AACD;AACF,eA9Be,CAgChB;;;AAhCgB,oBAiCZD,YAAY,IAAI,EAjCJ;AAAA;AAAA;AAAA;;AAAA,oBAkCR,IAAIV,KAAJ,CAAU,+BAAV,CAlCQ;;AAAA;AAqChB;AACAU,cAAAA,YAAY,GAAGA,YAAY,CAACI,MAAb,CAAqB,CAArB,EAAwBJ,YAAY,CAACK,MAAb,GAAoB,CAA5C,CAAf,CAtCgB,CAwChB;;AACAN,cAAAA,UAAU,aAAMA,UAAN,cAAoBC,YAApB,oBAA0Cf,GAAG,CAACa,MAA9C,gBAA0Db,GAAG,CAACI,EAA9D,CAAV,CAzCgB,CA4ChB;;AACAE,cAAAA,UAAU,CAACe,KAAX,CAAkBP,UAAlB,EAA8B,UAACQ,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AACxD,oBAAIF,KAAJ,EAAW;AACTnB,kBAAAA,MAAM,CAACmB,KAAD,CAAN;AACD,iBAFD,MAGK;AACHpB,kBAAAA,OAAO,CAACqB,OAAD,CAAP;AACD;AACF,eAPD;AA7CgB;AAAA;;AAAA;AAAA;AAAA;AAuDhBpB,cAAAA,MAAM,aAAN;;AAvDgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAAP;AA0DD,CA3DD;;eA6DeJ,c","sourcesContent":["import CreateConnection from './../CreateConnection/CreateConnection';\r\nimport mysql from 'mysql';\r\nimport HandleSchema from '../HandleSchema/HandleSchema';\r\n\r\n/**\r\n * La función para actualizar información.\r\n *\r\n * @param Object Se manda el object con los parametros a actualizar. El .tabla esta reservado para el nombre de la tabla y .id para el ID a actualizar.\r\n * @returns\r\n */\r\nconst UpdateDatabase = ( obj ) => {\r\n  return new Promise( async( resolve, reject ) => {\r\n    try {\r\n      // Si se intenta modificar el registro 0, da un error\r\n      if(obj.id == 0) {\r\n        throw new Error('904: No pueden editar el registro con ID 0');\r\n      }\r\n\r\n      //Crea el objeto para la conexión e importa el schema\r\n      const connection = CreateConnection,\r\n            schema = await HandleSchema()\r\n            .then( sch =>  sch );\r\n\r\n        //Revisa si existe la tabla\r\n      if ( !schema.hasOwnProperty(obj.tabla) )\r\n      {\r\n        throw new Error('902: Esa tabla no existe en el schema');\r\n      }\r\n\r\n      //Asigna el nombre de la tabla al objeto\r\n      obj.idname = schema[obj.tabla].id; \r\n\r\n      // Inicializa la query con el update\r\n      let mysqlQuery = `update ${ obj.tabla } set `,\r\n          columnaQuery = '';\r\n\r\n      // Itera sobre todos los atributos a actualizar\r\n      for( const columna in obj ) {\r\n        if ( columna != 'tabla' && columna != 'id' && columna != 'idname'  ) {\r\n          columnaQuery += `${columna} = ${mysql.escape(obj[columna])} , `;\r\n        }\r\n      }\r\n\r\n      // Si no encontro ningun atributo, devuelve error con update vacío\r\n      if( columnaQuery == '' ) {\r\n        throw new Error('905: Mandaron un update vacío');\r\n      }\r\n\r\n      // Quita la coma extra al final\r\n      columnaQuery = columnaQuery.substr (0, columnaQuery.length-2);\r\n\r\n      // Une la query inicial, los atributos a actualizar, y la condicion where del ID\r\n      mysqlQuery = `${mysqlQuery} ${columnaQuery} where ${obj.idname} = ${obj.id}`;\r\n\r\n\r\n      //Realiza la query. Si no hay error, resuelve con los resultados\r\n      connection.query( mysqlQuery, (error, results, fields) => {\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n        else {\r\n          resolve(results);\r\n        }\r\n      });\r\n    }\r\n    catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport default UpdateDatabase;\r\n"],"file":"UpdateDatabase.js"}