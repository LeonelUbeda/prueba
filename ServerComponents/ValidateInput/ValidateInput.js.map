{"version":3,"sources":["../../../src/ServerComponents/ValidateInput/ValidateInput.js"],"names":["ValidateFecha","val","regExp","RegExp","match","ValidateVarChar","length","ValidateChar","ValidateMoneda","isNaN","string","toString","ValidateInt","ValidateInput","obj","error","schema","JSON","parse","__dirname","hasOwnProperty","tabla","push","idname","id","respuesta","valor","prop","tipo","longitud"],"mappings":"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","sourcesContent":["import { readFileSync }  from 'fs';\r\nimport {join} from 'path';\r\n\r\nconst ValidateFecha = ( val ) => {\r\n  \r\n \r\n  const regExp = new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}$`);\r\n  \r\n   if ( !val.match(regExp) ){\r\n    return `no es una fecha valida`;\r\n\r\n  }\r\n\r\n  return '';\r\n\r\n};\r\n\r\nconst ValidateVarChar = ( val, length ) => {\r\n  \r\n \r\n  const regExp = new RegExp(`^.{1,${length}}$`);\r\n  \r\n   if ( !val.match(regExp) ){\r\n    return `debe de tener una longitud de entre 1 y ${length}`;\r\n\r\n  }\r\n\r\n  return '';\r\n\r\n};\r\n\r\nconst ValidateChar = ( val, length ) => {\r\n  \r\n \r\n  const regExp = new RegExp(`^.{${length}}$`);\r\n  \r\n   if ( !val.match(regExp) ){\r\n    return `debe de tener una longitud de ${length}`;\r\n\r\n  }\r\n\r\n  return '';\r\n\r\n};\r\n\r\nconst ValidateMoneda = ( val, length ) => {\r\n  \r\n\r\n  if( isNaN(val) ) {\r\n    return 'no es un número!';\r\n  }\r\n  if ( val < 0 ) {\r\n    return 'no puede ser negativo!';\r\n  }\r\n  \r\n  const string = val.toString(),\r\n        regExp = new RegExp(`^\\\\d{1,${length-2}}(\\\\.\\\\d{1,2})?$`);\r\n  \r\n  \r\n   if ( !string.match(regExp) ){\r\n    return `no es un monto valido`;\r\n\r\n  }\r\n  return '';\r\n};\r\n\r\nconst ValidateInt = ( val, length ) => {\r\n  \r\n\r\n  if( isNaN(val) ) {\r\n    return 'no es un número!';\r\n  }\r\n  if ( val < 0 ) {\r\n    return 'no puede ser negativo!';\r\n  }\r\n  \r\n  const string = val.toString(),\r\n        regExp = new RegExp(`^\\\\d{1,${length}}$`);\r\n  \r\n  \r\n   if ( !string.match(regExp) ){\r\n    return `debe de tener una longitud de 1 y ${length}`;\r\n\r\n  }\r\n\r\n  return '';\r\n\r\n};\r\n\r\nconst ValidateInput = (obj) => {\r\n\r\n  const error = [];\r\n\r\n  const schema = JSON.parse(\r\n    readFileSync(join(__dirname, '../../ServerFiles/Schema.json'))\r\n    );\r\n\r\n  if(!schema.hasOwnProperty(obj.tabla)) {\r\n\r\n    error.push('Esta tabla no existe en el schema!');\r\n    return error;\r\n\r\n  }\r\n\r\n  obj.idname = schema[obj.tabla].id;\r\n  let respuesta = '',\r\n      valor;\r\n\r\n  for ( let prop in obj ){\r\n    valor = obj[prop];\r\n    if ( prop != 'tabla' && prop != 'id' ) {\r\n      if (prop == 'idname'){\r\n        prop = obj[prop];\r\n        valor = obj.id;\r\n      }\r\n      if(!schema[obj.tabla].hasOwnProperty(prop)) {\r\n        error.push(`La propiedad ${prop} no existe en el schema`);\r\n      }\r\n      else {\r\n        switch(schema[obj.tabla][prop].tipo) {\r\n          case 'int':\r\n            respuesta = ValidateInt( valor, schema[obj.tabla][prop].longitud );\r\n            break;\r\n          case 'moneda':\r\n            respuesta = ValidateMoneda( valor, schema[obj.tabla][prop].longitud );\r\n            break;\r\n          case 'fecha':\r\n            respuesta = ValidateFecha( valor, schema[obj.tabla][prop].longitud );\r\n            break;\r\n          case 'char':\r\n            respuesta = ValidateChar( valor, schema[obj.tabla][prop].longitud );\r\n            break;\r\n          case 'varchar':\r\n            respuesta = ValidateVarChar( valor, schema[obj.tabla][prop].longitud );\r\n            break;\r\n          }\r\n        respuesta == '' ? null : error.push(`${prop} ${respuesta}`);\r\n        }\r\n      }\r\n    };\r\n\r\n    return error;\r\n\r\n  \r\n\r\n\r\n}\r\n\r\nexport default ValidateInput;\r\n"],"file":"ValidateInput.js"}