{"version":3,"sources":["../../../src/ServerComponents/DeleteFromDatabase/DeleteFromDatabase.js"],"names":["DeleteFromDatabase","obj","Promise","resolve","reject","id","Error","connection","CreateConnection","then","sch","err","schema","hasOwnProperty","tabla","idname","query","process","db","database","error","results","fields","length","changeQuery","child","TABLE_NAME","deleteQuery"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA;;;;;;AAMA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAAEC,GAAF,EAAY;AACrC,SAAO,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAa,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEfH,GAAG,CAACI,EAAJ,IAAU,CAFK;AAAA;AAAA;AAAA;;AAAA,oBAGV,IAAIC,KAAJ,CAAU,4CAAV,CAHU;;AAAA;AAOZC,cAAAA,UAPY,GAOCC,4BAPD;AAAA;AAAA,qBAQG,gCACdC,IADc,CACR,UAAAC,GAAG;AAAA,uBAAKA,GAAL;AAAA,eADK,WAEP,UAAAC,GAAG,EAAI;AAAC,sBAAMA,GAAN;AAAU,eAFX,CARH;;AAAA;AAQZC,cAAAA,MARY;AAUgB;;AAVhB,kBAYVA,MAAM,CAACC,cAAP,CAAsBZ,GAAG,CAACa,KAA1B,CAZU;AAAA;AAAA;AAAA;;AAAA,oBAcR,IAAIR,KAAJ,CAAU,uCAAV,CAdQ;;AAAA;AAiBhBL,cAAAA,GAAG,CAACc,MAAJ,GAAaH,MAAM,CAACX,GAAG,CAACa,KAAL,CAAN,CAAkBT,EAA/B,CAjBgB,CAmBlB;;AACAE,cAAAA,UAAU,CAACS,KAAX,4GACmCC,OAAO,CAACC,EAAR,CAAWC,QAD9C,4CACwFlB,GAAG,CAACa,KAD5F,SACuG,UAACM,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AACjI,oBAAIF,KAAJ,EAAW;AACThB,kBAAAA,MAAM,CAACgB,KAAD,CAAN;AACA,yBAAO,IAAP;AACD,iBAJgI,CAKjI;;;AACA,oBAAKC,OAAO,CAACE,MAAR,GAAiB,CAAtB,EAA0B;AAGtB,sBAAIC,WAAW,GAAG,EAAlB,CAHsB,CAItB;;AAJsB;AAAA;AAAA;;AAAA;AAKtB,yCAAkBH,OAAlB,8HAA4B;AAAA,0BAAnBI,KAAmB;AAC1BD,sBAAAA,WAAW,qBAAeC,KAAK,CAACC,UAArB,kBAAyCzB,GAAG,CAACc,MAA7C,wBAAmEd,GAAG,CAACc,MAAvE,gBAAqFd,GAAG,CAACI,EAAzF,SAAX;AACD,qBAPqB,CAStB;;AATsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUtB,sBAAKmB,WAAW,IAAI,EAApB,EAAwB;AACtBjB,oBAAAA,UAAU,CAACS,KAAX,CAAkBQ,WAAlB,EAA+B,UAACJ,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AACzD,0BAAGF,KAAH,EAAU;AACRhB,wBAAAA,MAAM,CAACgB,KAAD,CAAN;AACD;AACF,qBAJD;AAKD;AAGJ,iBAzBgI,CA2BjI;;;AACA,oBAAIO,WAAW,oBAAa1B,GAAG,CAACa,KAAjB,uCAAmDb,GAAG,CAACc,MAAvD,iBAAoEd,GAAG,CAACI,EAAxE,MAAf,CA5BiI,CA8BjI;;AACAE,gBAAAA,UAAU,CAACS,KAAX,CAAkBW,WAAlB,EAA+B,UAACP,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AACzD,sBAAIF,KAAJ,EAAW;AACThB,oBAAAA,MAAM,CAAEgB,KAAF,CAAN;AACA,2BAAO,IAAP;AACD;;AAEDjB,kBAAAA,OAAO,CAACkB,OAAD,CAAP;AAED,iBARD;AASD,eAzCD;;AApBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAAP;AA+DD,CAhED;;eAkEerB,kB","sourcesContent":["import CreateConnection from './../CreateConnection/CreateConnection';\r\nimport HandleSchema from '../HandleSchema/HandleSchema'\r\n\r\n/**\r\n * La función para borrar una base de dato.\r\n *\r\n * @param Object Se manda .id con el ID de la tabla y .tabla con el nombre de la tabla.\r\n * @returns\r\n */\r\nconst DeleteFromDatabase = ( obj  ) => {\r\n  return new Promise( async( resolve, reject ) => {\r\n\r\n    if(obj.id == 0) {\r\n      throw new Error('903: No pueden borrar el registro con ID 0');\r\n    }\r\n\r\n    //Crea el objeto para la conexión e importa el schema\r\n    const connection = CreateConnection,\r\n          schema = await HandleSchema()\r\n          .then( sch =>  sch )\r\n          .catch( err => {throw err});;\r\n\r\n      if ( !schema.hasOwnProperty(obj.tabla) )\r\n      {\r\n        throw new Error('902: Esa tabla no existe en el schema');\r\n      }\r\n  \r\n      obj.idname = schema[obj.tabla].id; \r\n\r\n    //Checkea si la tabla tiene hijos foreign keys\r\n    connection.query(`select TABLE_NAME from INFORMATION_SCHEMA.KEY_COLUMN_USAGE\r\n    where REFERENCED_TABLE_SCHEMA = '${process.db.database}' AND REFERENCED_TABLE_NAME = '${obj.tabla}';`, (error, results, fields) => {\r\n      if (error) {\r\n        reject(error);\r\n        return null;\r\n      }\r\n      //Si hay tablas hijos, inicializa este codigo\r\n      if ( results.length > 0 ) {\r\n\r\n        \r\n          let changeQuery = '';\r\n          //Crea el query con cada tabla hijo para actualizar el id al 0\r\n          for( let child of results ) {\r\n            changeQuery += `update ${ child.TABLE_NAME } set ${ obj.idname } = 0 where ${ obj.idname } = ${ obj.id }; \\n`;\r\n          }\r\n\r\n          //Si hay children tables, cambia las foreign keys a 0\r\n          if ( changeQuery != '' ){\r\n            connection.query( changeQuery, (error, results, fields) => {\r\n              if(error) {\r\n                reject(error);\r\n              }\r\n            });\r\n          }\r\n\r\n        \r\n      }\r\n\r\n      //Crea la query para borrar el registro\r\n      let deleteQuery = `update ${obj.tabla} set borrado = true where ${obj.idname} = '${obj.id}'`;\r\n\r\n      //Ejecuta la query\r\n      connection.query( deleteQuery, (error, results, fields) => {\r\n        if (error) {\r\n          reject( error );\r\n          return null;\r\n        }\r\n\r\n        resolve(results);\r\n\r\n      });\r\n    });    \r\n  });\r\n};\r\n\r\nexport default DeleteFromDatabase;\r\n"],"file":"DeleteFromDatabase.js"}