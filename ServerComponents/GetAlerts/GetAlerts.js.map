{"version":3,"sources":["../../../src/ServerComponents/GetAlerts/GetAlerts.js"],"names":["GetAlerts","Promise","resolve","reject","connection","CreateConnection","mysqlQuery","x","Date","getFullYear","getMonth","getDate","query","error","results","fields","tupla","fecha","fecha_caducidad"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA;;;;;;AAMA,IAAMA,SAAS,GAAG,SAAZA,SAAY,GAAQ;AACxB,SAAO,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAa,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAClB,kBAAI;AACF;AACMC,gBAAAA,UAFJ,GAEiBC,4BAFjB;AAGEC,gBAAAA,UAHF;AAKIC,gBAAAA,CALJ,GAKQ,IAAIC,IAAJ,EALR;AAQFF,gBAAAA,UAAU,oYAA6XC,CAAC,CAACE,WAAF,EAA7X,cAAgZF,CAAC,CAACG,QAAF,KAAa,CAA7Z,cAAkaH,CAAC,CAACI,OAAF,EAAla,mCAAV;AAEAP,gBAAAA,UAAU,CAACQ,KAAX,CAAkBN,UAAlB,EAA8B,UAACO,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AACxD,sBAAIF,KAAJ,EAAW;AACTV,oBAAAA,MAAM,CAACU,KAAD,CAAN;AACD,mBAFD,MAGK;AACH,yBAAK,IAAIG,KAAT,IAAkBF,OAAO,CAAC,CAAD,CAAzB,EAA+B;AAC7B,0BAAMG,KAAK,GAAGH,OAAO,CAAC,CAAD,CAAP,CAAWE,KAAX,EAAkBE,eAAhC;AACAJ,sBAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,KAAX,EAAkBE,eAAlB,aAAuCD,KAAK,CAACR,WAAN,EAAvC,cAA8DQ,KAAK,CAACP,QAAN,KAAiB,CAA/E,cAAoFO,KAAK,CAACN,OAAN,EAApF;AACD;;AACDT,oBAAAA,OAAO,CAACY,OAAD,CAAP;AAED;AACF,iBAZD;AAcD,eAxBD,CAyBA,OAAOD,KAAP,EAAc;AACZV,gBAAAA,MAAM,CAACU,KAAD,CAAN;AACD;;AA5BiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAAP;AA8BD,CA/BD;;eAiCeb,S","sourcesContent":["import CreateConnection from './../CreateConnection/CreateConnection';\r\nimport HandleSchema from '../HandleSchema/HandleSchema';\r\n\r\n/**\r\n * Funcion para conseguir las alertas de los lotes.\r\n *\r\n * \r\n * @returns\r\n */\r\nconst GetAlerts = (  ) => {\r\n  return new Promise( async( resolve, reject ) => {\r\n    try {\r\n      //Crea el objeto para la conexi√≥n e importa el schema\r\n      const connection = CreateConnection;\r\n      let mysqlQuery = `select producto.nombre, producto.minimo_stock, cantidad, producto.sku as producto, lotes.sku as lotes from producto join (select id_lotes, sum(cantidad) as cantidad, sku, borrado from lotes group by sku) as lotes on producto.sku = lotes.sku where producto.borrado = false and lotes.borrado = false and lotes.cantidad <= producto.minimo_stock and lotes.id_lotes != 0 and producto.vigilar = true;`;\r\n\r\n      const x = new Date();\r\n\r\n      \r\n      mysqlQuery += `select id_lotes, dias_antes_vencimiento, fecha_caducidad, producto.sku as producto, lotes.sku as lotes , producto.nombre as nombre from producto join (select id_lotes, fecha_caducidad, sku, borrado from lotes) as lotes on producto.sku = lotes.sku where producto.borrado = false and lotes.borrado = false and date_sub(fecha_caducidad,interval dias_antes_vencimiento day) <= '${x.getFullYear()}-${x.getMonth()+1}-${x.getDate()}' and producto.perecedero = 1;`;\r\n\r\n      connection.query( mysqlQuery, (error, results, fields) => {\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n        else {\r\n          for( let tupla in results[1] ) {\r\n            const fecha = results[1][tupla].fecha_caducidad;\r\n            results[1][tupla].fecha_caducidad = `${fecha.getFullYear()}-${fecha.getMonth()+1}-${fecha.getDate()}`;\r\n          }\r\n          resolve(results);\r\n          \r\n        }\r\n      });\r\n\r\n    }\r\n    catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport default GetAlerts;\r\n\r\n\r\n\r\n\r\n\r\n"],"file":"GetAlerts.js"}